// https://github.com/ronsavage/SQL/blob/master/sql-2016.ebnf
// https://github.com/lark-parser/lark/blob/master/lark/grammars/common.lark
// https://github.com/zbrookle/sql_to_ibis/blob/main/sql_to_ibis/grammar/sql.lark
// https://lark-parser.readthedocs.io/en/latest/
// https://lark-parser.readthedocs.io/en/latest/_static/lark_cheatsheet.pdf
// https://www.sigbus.info/compilerbook

?start: stmt
?stmt: select
//    | delete
//    | update
//    | insert

select: "SELECT"i returning_stmt [query_stmt] [ orderby_stmt ] [union_stmt] [";"]
subquery: "(" select ")"
// subquery: "(" select ")" [ [ "AS"i ] name ]

item: expr [ [ "AS"i ] name ]
order_item: expr [ASC_OR_DESC]

items: [(item ",")*] item


join_on_items: [(expr ",")*] expr
join_using_items: [(name ",")*] name
order_items: [(order_item ",")*] order_item
// args: [(expr ",")*]

returning_stmt: items
// select t1.* from demo t1 union ALL select * from demo t2      ok
// select t2.* from demo t1 union ALL select * from demo t2      db error: ERROR: missing FROM-clause entry for table "t2"
?union_stmt: "UNION"i ["ALL"i] ["DISTINCT"i] ["("] select [")"] -> union_all_stmt
    | "INTERSECT"i ["ALL"i] ["DISTINCT"i] ["("] select [")"] -> intersect_stmt
    | "EXCEPT"i ["ALL"i] ["DISTINCT"i] ["("] select [")"] -> except_stmt
query_stmt: from_stmt [ join_stmts ] [ groupby_stmt ] [ where_stmt ] [ having_stmt ] [ window_stmt ] [ limit_stmt ] [ offset_stmt ]
// from_stmt: "FROM"i items
from_stmt: "FROM"i items
// JOINはデフォルトでINNER JOINを示す
// JOINは複数回登場させることができる
// FULL OUTER JOIN / CROSS JOIN
// join_stmt: ["NATURAL"i] ["INNER"i] ["CROSS"i] ["STRAIGHT"i] ["LEFT"i] ["RIGHT"i] ["OUTER"i] "JOIN"i items "ON"i "USING"i (c1, c2, c3)
// join_stmt: join_on_stmt | join_using_stmt
// left join と left outer joinは同じ
// NATURAL 同じカラム名を自動結合する（ON, USINGを省略できる）
// join_table:

// mysql
// table_reference [INNER | CROSS] JOIN table_factor [join_condition]
//   | table_reference STRAIGHT_JOIN table_factor
//   | table_reference STRAIGHT_JOIN table_factor ON conditional_expr
//   | table_reference {LEFT|RIGHT} [OUTER] JOIN table_reference join_condition
//   | table_reference NATURAL [{LEFT|RIGHT} [OUTER]] JOIN table_factor

// postgres
// T1 { [INNER] | { LEFT | RIGHT | FULL } [OUTER] } JOIN T2 ON boolean_expression
// T1 { [INNER] | { LEFT | RIGHT | FULL } [OUTER] } JOIN T2 USING ( join column list )
// T1 NATURAL { [INNER] | { LEFT | RIGHT | FULL } [OUTER] } JOIN T2

// larkはこのような改行の構文が使用できない
// (["INNER"i]
//    | ["CROSS"i]
// )
// RESERVED_WORDSより優先させる
// ! - keep keyword
!join_type.10: "INNER"i
    | "CROSS"i
    | "LEFT"i
    | "LEFT"i "OUTER"i
    | "RIGHT"i
    | "RIGHT"i "OUTER"i
    | "FULL"i
    | "FULL"i "OUTER"i
join_stmts: join_stmt*
join_stmt: ["NATURAL"i] [join_type] ("JOIN"i | "STRAIGHT_JOIN"i) items (join_on_stmt | join_using_stmt)
join_on_stmt: "ON"i join_on_items
join_using_stmt: "USING"i "(" join_using_items ")"
groupby_stmt: "GROUP"i "BY"i items
where_stmt: "WHERE"i expr
having_stmt: "HAVING"i expr

//# WINDOW ウインドウ名 AS (・・・)
window_stmt: "WINDOW"i expr
orderby_stmt: "ORDER"i "BY"i order_items
limit_stmt: "LIMIT"i expr
offset_stmt: "OFFSET"i expr


// from_item: [name "."] name [ [ "AS"i ] alias ] -> table
            // | join -> join
            // | cross_join -> cross_join_expression
            // | subquery

ASC_OR_DESC: "ASC"i | "DESC"i

// primary: num | "(" expr ")"
?value: SIGNED_INT      -> int
        | SIGNED_FLOAT      -> float
        | "true"i             -> true
        | "false"i            -> false
        | "null"i             -> null
        | "ARRAY"i "[" [expr ("," expr)*] "]" -> array
        // | STRING_LITERAL (SEPARATOR* STRING_LITERAL)* -> str
        // | STRING_LITERAL STRING_LITERAL* -> str
        | STRING_LITERAL+ -> str

STRING_LITERAL: "'" _STRING_ESC_INNER "'"
?name: RESERVED_WORDS | NAME
NAME: ESCAPED_STRING | CNAME
STAR: "*"
identifier: [name "."] (name | STAR)
func: [name "."] name "(" expr* ")"

COMMENT_SIMPLE: /--[^\n]*/
COMMENT_BRACKET: /\/\*.+?\*\//
// COMMENT_BRACKET: "/*" /.*/ "*/"
// プレースホルダの形式は DBAPIで異なる
// PLACEHOLDER: :{id}
// cx_Oracle: :x、psycopg2: %(x)s %s
// プリペアードステートメントにおけるプレースホルダは ? で実現する

%import common.ESCAPED_STRING
%import common.WS
%import common.CNAME
%import common.SIGNED_INT
%import common.SIGNED_FLOAT
%import common.NEWLINE
%import common._STRING_ESC_INNER

SEPARATOR: COMMENT_SIMPLE | COMMENT_BRACKET | WS | NEWLINE

%ignore COMMENT_SIMPLE
%ignore COMMENT_BRACKET
%ignore WS
%ignore NEWLINE
%ignore SEPARATOR

RESERVED_WORDS: "SELECT"i
    | "DELETE"i
    | "INSERT"i
    | "UPDATE"i
    | "INTO"i
    | "CREATE"i
    | "UNION"i
    | "INTERSECT"i
    | "EXCEPT"i
    | "FROM"i
    // JOIN
    | "NATURAL"
    | "JOIN"i
    | "STRAIGHT_JOIN"i
    | "CROSS"i
    | "INNER"i
    | "RIGHT"i
    | "LEFT"i
    | "OUTER"i
    | "ON"i
    | "USING"i
    | "GROUP"i
    | "BY"i
    | "WHERE"i
    | "HAVING"i
    | "WINDOW"i
    | "ORDER"i
    | "LIMIT"i
    | "OFFSET"i
    // | "ALL"i
    // | "ANY"i
    // | "SOME"i
    // | "EXISTS"i
    | "NOT"i
    | "IS"i
    | "NULL"i
    | "ISNULL"i
    | "LIMIT"i
    | "OFFSET"i
    | "AS"i
    | "IN"i
    | "AND"i
    | "OR"i
    | "ASC"i
    | "DESC"i
    | "LIKE"i
    | "BETWEEN"i
    | "OVER"i
    | "FOR"i
    | "IF"i
    | "ELSE"i
    | "CASE"i
    | "WHEN"i
    | "THEN"i
    | "END"i
    | "ABS"i
    | "ALLOCATE"i
    | "ARE"i
    | "ARRAY_AGG"i
    | "ARRAY_MAX_CARDINALITY"i
    | "ASENSITIVE"i
    | "ASIN"i
    | "ATAN"i
    | "ATOMIC"i
    | "AUTHORIZATION"i
    | "AVG"i
    // | "BEGIN"i
    // | "BEGIN"i
    | "CASCADED"i
    | "CASE"i
    | "CAST"i
    | "RAISE"i
    | "EXCEPT"i
    | "COLUMN"i
    | "CONSTRAINT"i
    | "DISTINCT"i
    | "WITH"i
    | "CURRENT_CATALOG"i
    | "CURRENT_DATE"i
    | "CURRENT_ROLE"i
    | "CURRENT_SCHEMA"i
    | "CURRENT_TIME"i
    | "CURRENT_TIMESTAMP"i
    | "CURRENT_USER"i
    | "DEFAULT"i
    | "DO"i
    | "EXEC"i
    | "EXECUTE"i
    | "EXP"i
    | "FOREIGN"i
    | "GRANT"i
    | "ILIKE"i
    | "LEADING"i
    | "SET"i
    | "LOCALTIME"i
    | "LOCALTIMESTAMP"i
    | "MODULE"i
    | "ONLY"i
    | "OVERLAPS"i  // op
    | "PRIMARY"i
    | "RETURN"i
    | "RETURNING"i
    | "SIMILAR"i
    | "TO"i
    | "SQLEXCEPTION"i
    | "TABLE"i
    | "TRAILING"i
    | "COMMIT"i
    | "ROLLBACK"i
    | "UNIQUE"i


?expr: identifier
    | func
    | subquery
    | value
    // | identifier
    // | func
    | op



BOPS: "="
    | "!="
    | "<>"
    | ">"
    | "<"
    | ">="
    | "<="
    | "+"
    | "-"
    | "*"
    | "/"
    | "%"
    | "^"
    | "&"
    | "|"
    | "#"
    | "<<"
    | ">>"
    | "||"
    | "!!="
    | "~~"
    | "!~~"
    | "~"
    | "~*"
    | "!~"
    | "!~*"
    | "LIKE"i
    | "AND"i
    | "OR"i
    | "IS"i

SIGN: "NOT"i
    | "+"
    | "-"
    | "|/"
    | "|/"
    | "||/"
    | "!!"
    | "@"
    | "~"

// https://www.postgresql.jp/docs/9.2/functions-math.html
// https://www.postgresql.jp/document/pg632doc/postgres/c09.htm
// pg_operator
?op: "(" expr ")"
    | SIGN expr -> sign_expr
    // | "NOT"i expr
    // | "|/" expr
    // | "||/" expr
    // | "!!" expr
    // | "@" expr
    // | "~" expr
    // | "ALL"i subquery
    // | "ANY"i subquery
    // | "SOME"i subquery
    // | "EXISTS"i subquery
    // | "NOT"i "EXISTS"i subquery
    // | expr "is"i "null"i
    // | expr "is"i "not"i "null"i
    | expr "BETWEEN"i expr "AND"i expr
    | expr "IN"i "(" [expr ("," expr)*] ")"
    | expr "NOT"i "IN"i "(" [expr ("," expr)*] ")"
    | expr "IN"i subquery
    | expr "NOT"i "IN"i subquery
    | expr BOPS expr -> bo_expr
    | expr "!"




// SELECT '{"bar": "baz", "balance": 7.77, "active":false}'::json;
// SELECT '{"bar": "baz", "balance": 7.77, "active":false}'::jsonb;

// primary_expr
// postfix_expr
// prefix_expr

// jsonとxmlの相互互換性を維持するためjsonmlというjson互換の表現方法がある